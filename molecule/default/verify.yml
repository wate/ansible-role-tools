---
- name: Verify
  hosts: all
  gather_facts: true
  become: true
  tasks:
    ## テストの前処理
    - name: Gather facts
      block:
        - name: Gather package fact
          ansible.builtin.package_facts:
            manager: auto
        - name: Gather service fact
          ansible.builtin.service_facts:
        - name: Gather listening ports fact
          community.general.listen_ports_facts:
            command: ss
        - name: Set listen ports fact variables
          ansible.builtin.set_fact:
            listen_tcp_posts: "{{ ansible_facts.tcp_listen | map(attribute='port') | unique | sort | list }}"
            listen_udp_posts: "{{ ansible_facts.udp_listen | map(attribute='port') | unique | sort | list }}"
    ## 各パッケージのテスト
    - name: Test eza
      block:
        - name: Check eza gpg key
          ansible.builtin.stat:
            path: /usr/share/keyrings/gierens.gpg.asc
          register: eza_gpg_key_result
        - name: Assert eza gpg key
          ansible.builtin.assert:
            that: eza_gpg_key_result.stat.exists
        - name: Check eza apt repository
          ansible.builtin.stat:
            path: /etc/apt/sources.list.d/gierens.list
          register: eza_repository_result
        - name: Assert goaccess apt repository
          ansible.builtin.assert:
            that: eza_repository_result.stat.exists
        - name: Assert installed eza
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['eza']
              - ansible_facts.packages['eza'][0]['origin'] != 'Debian'
    - name: Test Graphviz
      block:
        - name: Assert installed graphviz
          ansible.builtin.assert:
            that: ansible_facts.packages['graphviz']
    - name: Test fd
      block:
        - name: Assert installed fd
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['fd-find']
              - ansible_facts.packages['fd-find'][0]['origin'] == 'Debian'
          when: ansible_facts.distribution_major_version is version(12, '<')
        - name: Assert installed fd
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['fd']
              - ansible_facts.packages['fd'][0]['origin'] != 'Debian'
          when: ansible_facts.distribution_major_version is version(12, '>=')
    - name: Test bat
      block:
        - name: Assert bat
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['bat']
              - ansible_facts.packages['bat'][0]['origin'] != 'Debian'
    - name: Test tig
      block:
        - name: Assert installed tig
          ansible.builtin.assert:
            that: ansible_facts.packages['tig']
    - name: Test lazygit
      block:
        - name: Check lazygit
          ansible.builtin.stat:
            path: /usr/local/bin/lazygit
          register: lazygit_command_result
        - name: Assert installed lazygit
          ansible.builtin.assert:
            that:
              - lazygit_command_result.stat.exists
              - lazygit_command_result.stat.executable
    - name: Test GoAccess
      block:
        - name: Check goaccess gpg key
          ansible.builtin.stat:
            path: /usr/share/keyrings/goaccess.gpg.key
          register: goaccess_gpg_key_result
        - name: Assert goaccess gpg key
          ansible.builtin.assert:
            that: goaccess_gpg_key_result.stat.exists
        - name: Check goaccess apt repository
          ansible.builtin.stat:
            path: /etc/apt/sources.list.d/goaccess.list
          register: goaccess_repository_result
        - name: Assert goaccess apt repository
          ansible.builtin.assert:
            that: goaccess_repository_result.stat.exists
        - name: Assert installed GoAccess
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['goaccess']
              - ansible_facts.packages['goaccess'][0]['origin'] != 'Debian'
        ## MaxMindのGeoIPデータベース関連テスト
        - name: Set goaccess_geoip_enabled variable
          ansible.builtin.set_fact:
            goaccess_geoip_enabled: "{{ lookup('env', 'MAXMIND_ACCOUNT_ID') | length > 0 and lookup('env', 'MAXMIND_LICENSE_KEY') | length > 0 }}"
        - name: Test geoipupdate
          when: goaccess_geoip_enabled
          block:
            - name: Assert installed geoipupdate
              ansible.builtin.assert:
                that:
                  - ansible_facts.packages['geoipupdate']
                  - ansible_facts.packages['geoipupdate'][0]['origin'] != 'Debian'
            - name: Check geoipupdate setting
              ansible.builtin.lineinfile:
                path: /etc/GeoIP.conf
                line: "{{ item }}"
              loop:
                - AccountID {{ lookup('env', 'MAXMIND_ACCOUNT_ID') }}
                - LicenseKey {{ lookup('env', 'MAXMIND_LICENSE_KEY') }}
                - EditionIDs GeoLite2-Country GeoLite2-City
              register: geoipupdate_setting_result
              no_log: true
              check_mode: true
            - name: Assert geoipupdate setting
              ansible.builtin.assert:
                that: geoipupdate_setting_result is not changed
            - name: Check GeoIP database autoupdate setting
              ansible.builtin.stat:
                path: /etc/cron.weekly/geoipupdate
              register: geoipupdate_cron_setting_result
            - name: Assert GeoIP database autoupdate setting
              ansible.builtin.assert:
                that:
                  - geoipupdate_cron_setting_result.stat.exists
                  - geoipupdate_cron_setting_result.stat.executable
            - name: Check GeoLite2-Country database file
              ansible.builtin.stat:
                path: /usr/share/GeoIP/GeoLite2-Country.mmdb
              register: geoip_database_country_stat_result
            - name: Assert GeoLite2-Country database file
              ansible.builtin.assert:
                that: geoip_database_country_stat_result.stat.exists
            - name: Check GeoLite2-City database file
              ansible.builtin.stat:
                path: /usr/share/GeoIP/GeoLite2-City.mmdb
              register: geoip_database_city_stat_result
            - name: Assert GeoLite2-City database file
              ansible.builtin.assert:
                that: geoip_database_city_stat_result.stat.exists
            - name: Check goaccess geoip-database setting
              ansible.builtin.lineinfile:
                path: /etc/goaccess/goaccess.conf
                line: geoip-database /usr/share/GeoIP/GeoLite2-City.mmdb
              register: goaccess_geoip_database_setting_result
              check_mode: true
            - name: Assert goaccess geoip-database setting
              ansible.builtin.assert:
                that: goaccess_geoip_database_setting_result is not changed
    - name: Test osv-scanner
      block:
        - name: Check osv-scanner command
          ansible.builtin.stat:
            path: /usr/local/bin/osv-scanner
          register: osv_scanner_command_result
        - name: Assert osv-scanner command
          ansible.builtin.assert:
            that:
              - osv_scanner_command_result.stat.exists
              - osv_scanner_command_result.stat.executable
    - name: Test direnv
      block:
        - name: Assert installed direnv
          ansible.builtin.assert:
            that: ansible_facts.packages['direnv']
    - name: Test task
      block:
        - name: Assert installed task
          ansible.builtin.assert:
            that: ansible_facts.packages['task']
    - name: Test restic
      block:
        - name: Assert installed restic
          ansible.builtin.assert:
            that: ansible_facts.packages['restic']
    - name: Test rclone
      block:
        - name: Assert installed rclone
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['rclone']
              - ansible_facts.packages['rclone'][0]['origin'] != 'Debian'
    - name: Test Pandoc
      block:
        - name: Assert installed pandoc
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['pandoc']
              - ansible_facts.packages['pandoc'][0]['origin'] != 'Debian'
    - name: Test Plantuml
      block:
        - name: Assert installed plantuml
          ansible.builtin.assert:
            that: ansible_facts.packages['plantuml']
    - name: Test tbls
      block:
        - name: Assert installed tbls
          ansible.builtin.assert:
            that: ansible_facts.packages['tbls']
    - name: Test runn
      block:
        - name: Assert installed runn
          ansible.builtin.assert:
            that: ansible_facts.packages['runn']
    - name: Test delta
      block:
        - name: Assert installed delta
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['git-delta-musl']
              - ansible_facts.packages['git-delta-musl'][0]['origin'] != 'Debian'
          when: ansible_facts.distribution_major_version is version('11', '<=')
        - name: Assert installed delta
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['git-delta']
              - ansible_facts.packages['git-delta'][0]['origin'] != 'Debian'
          when: ansible_facts.distribution_major_version is version('11', '>')
    - name: Test D2
      block:
        - name: Check d2 command
          ansible.builtin.stat:
            path: /usr/local/bin/d2
          register: d2_command_result
        - name: Assert d2 command
          ansible.builtin.assert:
            that:
              - d2_command_result.stat.exists
              - d2_command_result.stat.executable
    - name: Test Glow
      block:
        - name: Assert installed glow
          ansible.builtin.assert:
            that: ansible_facts.packages['glow']
    - name: Test WP-CLI
      block:
        - name: Check wp command
          ansible.builtin.stat:
            path: /usr/local/bin/wp
          register: wp_command_result
        - name: Assert wp command
          ansible.builtin.assert:
            that:
              - wp_command_result.stat.exists
              - wp_command_result.stat.executable
    - name: Test pict
      block:
        - name: Check pict command
          ansible.builtin.stat:
            path: /usr/local/bin/pict
          register: pict_command_result
        - name: Assert pict command
          ansible.builtin.assert:
            that:
              - pict_command_result.stat.exists
              - pict_command_result.stat.executable
    - name: Test fnt
      block:
        - name: Assert installed fnt
          ansible.builtin.assert:
            that: ansible_facts.packages['fnt']
    - name: Test poppler-utils
      block:
        - name: Assert installed poppler-utils
          ansible.builtin.assert:
            that: ansible_facts.packages['poppler-utils']
    - name: Test Hogo
      block:
        - name: Check hogo command
          ansible.builtin.stat:
            path: /usr/local/bin/hugo
          register: hugo_command_result
        - name: Assert hogo command
          ansible.builtin.assert:
            that:
              - hugo_command_result.stat.exists
              - hugo_command_result.stat.executable
    - name: Test Tesseract OCR
      block:
        - name: Check tesseract-ocr gpg key
          ansible.builtin.stat:
            path: /usr/share/keyrings/tesseract-ocr.gpg.asc
          register: tesseract_ocr_gpg_key_result
        - name: Assert tesseract-ocr gpg key
          ansible.builtin.assert:
            that: tesseract_ocr_gpg_key_result.stat.exists
        - name: Check tesseract-ocr apt repository
          ansible.builtin.stat:
            path: /etc/apt/sources.list.d/notesalexp.list
          register: tesseract_ocr_repository_result
        - name: Assert tesseract-ocr apt repository
          ansible.builtin.assert:
            that: tesseract_ocr_repository_result.stat.exists
        - name: Assert installed tesseract-ocr
          ansible.builtin.assert:
            that: ansible_facts.packages['tesseract-ocr']
    - name: Test MeCab
      block:
        - name: Assert installed mecab
          ansible.builtin.assert:
            that: ansible_facts.packages['mecab']
    - name: Test zx
      block:
        - name: Check zx command
          ansible.builtin.stat:
            path: /usr/bin/zx
          register: zx_command_result
        - name: Assert zx command
          ansible.builtin.assert:
            that:
              - zx_command_result.stat.exists
              - zx_command_result.stat.executable
